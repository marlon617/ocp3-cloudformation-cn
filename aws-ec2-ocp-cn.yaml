AWSTemplateFormatVersion: '2010-09-09'
Description: 'OpenShift+VPC, License: Apache 2.0 May, 20, 2019'
Metadata:
  AWSAMIRegionMap:
    Filters:
      RHEL76HVM:
        name: RHEL-7.6_HVM_GA-20??????-x86_64-0-Hourly2-GP2
        owner-id: "841258680906"
        architecture: x86_64
        virtualization-type: hvm
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - RemoteAccessCIDR
          - ContainerAccessCIDR
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - AmiId
      - Label:
          default: OpenShift Hosts Configuration
        Parameters:
          - ClusterName
          - NumberOfMaster
          - NumberOfEtcd
          - NumberOfNodes
          - MasterInstanceType
          - EtcdInstanceType
          - NodesInstanceType
    ParameterLabels:
      KeyPairName:
        default: SSH Key Name
      AmiId:
        default: AMI ID
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      PublicSubnet3ID:
        default: Public Subnet 3 ID
      RemoteAccessCIDR:
        default: Allowed External Access CIDR (OCP UI)
      ContainerAccessCIDR:
        default: Allowed External Access CIDR (OCP Router)
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      MasterInstanceType:
        default: Master Instance Type
      EtcdInstanceType:
        default: Etcd Instance Type
      NodesInstanceType:
        default: Nodes Instance Type
      NumberOfMaster:
        default: Number of Masters
      NumberOfEtcd:
        default: Number of Etcds
      NumberOfNodes:
        default: Number of Nodes
      ClusterName:
        default: Cluster Name
Parameters:
  AmiId:
    Description: >-
      OPTIONAL: bring your own AMI. In Enterprise environment, you might
      need to bring your own AMI (with proxy, softwares, ...).
      If the AMI is encrypted, keep in mind that the key policy should allow use of
      the key from AWSServiceRoleForAutoScaling.
      If left blank, we'll use the base RHEL image from your region.
    Type: String
    Default: ""
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the Workload (e.g.,
      subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the Workload (e.g.,
      subnet-b1f432cd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the Workload (e.g.,
      subnet-b1f4a2cd)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer
      (e.g., subnet-9bc642ac)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer
      (e.g., subnet-e3246d8e)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet3ID:
    Description: ID of public subnet 3 in Availability Zone 3 for the ELB load balancer
      (e.g., subnet-e324ad8e)
    Type: AWS::EC2::Subnet::Id
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String
    Default: 0.0.0.0/0
  ContainerAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the instances We recommend
      that you set this value to a trusted IP range.
    Type: String
    Default: 0.0.0.0/0
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  MasterInstanceType:
    Default: m4.xlarge
    AllowedValues:
      - t2.xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the Master instances
    Type: String
  EtcdInstanceType:
    Default: m4.xlarge
    AllowedValues:
      - t2.large
      - t2.xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the Etcd instances
    Type: String
  NodesInstanceType:
    Default: m4.xlarge
    AllowedValues:
      - t2.large
      - t2.xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: Must contain valid instance type
    Description: Type of EC2 instance for the Node instances
    Type: String
  NumberOfMaster:
    Default: '3'
    Description: This Deployment requires 3 OpenShift Master instances
    Type: String
    AllowedPattern: '^[357]$|(^[1-9]+[1357]$)'
  NumberOfEtcd:
    Default: '3'
    Description: This Deployment requires 3 OpenShift Etcd instances
    Type: String
    AllowedPattern: '^[357]$|(^[1-9]+[1357]$)'
  NumberOfNodes:
    Default: '3'
    Description: The desired capacity for the OpenShift node instances
    Type: Number
  ClusterName:
    Default: ""
    Description: Custom cluster name for kubernetes.io/cluster/ tags, if left blank will use the stackname suffixed with the region
    Type: String
    Default: openshift
Mappings:
  AWSAMIRegionMap:
    cn-northwest-1:
      RHEL76HVM: ami-05ccd5cd6d75c2346
    cn-north-1:
      RHEL76HVM: ami-0287477b6a70b336a
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
Conditions:
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1
  UseCustomAmi: !Not
    - !Equals
      - !Ref 'AmiId'
      - ''
  CustomClusterName: !Not
    - !Equals
      - !Ref ClusterName
      - ""
Resources:
  RegistryBucket:
    Type: "AWS::S3::Bucket"
  SetupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com.cn
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      Policies:
        - PolicyName: WorkloadSetup
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:Describe*
                  - autoscaling:AttachLoadBalancers
                  - ec2:Describe*
                Resource: '*'
        - PolicyName: K8s-AWSCloudProvider-requirements
          PolicyDocument:
            Statement:
              - Action:
                  - autoscaling:CreateAutoScalingGroup
                  - autoscaling:CreateLaunchConfiguration
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:DescribeScalingActivities
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:DeleteAutoScalingGroup
                  - autoscaling:DeleteLaunchConfiguration
                  - autoscaling:SuspendProcesses
                  - autoscaling:ResumeProcesses
                  - autoscaling:AttachLoadBalancerTargetGroups
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:AllocateAddress
                  - ec2:AssociateAddress
                  - ec2:AssociateRouteTable
                  - ec2:AttachInternetGateway
                  - ec2:AttachVolume
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateInternetGateway
                  - ec2:CreateNatGateway
                  - ec2:CreateRoute
                  - ec2:CreateRouteTable
                  - ec2:CreateSecurityGroup
                  - ec2:CreateSubnet
                  - ec2:CreateTags
                  - ec2:CreateVpc
                  - ec2:CreateVolume
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAddresses
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeImages
                  - ec2:DescribeInstances
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribeRegions
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcClassicLink
                  - ec2:DescribeVpcClassicLinkDnsSupport
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifySubnetAttribute
                  - ec2:ModifyVpcAttribute
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:DeleteRoute
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DisassociateRouteTable
                  - ec2:ReplaceRouteTableAssociation
                  - ec2:DeleteRouteTable
                  - ec2:DeleteSubnet
                  - ec2:DescribeNetworkInterfaces
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:DeleteNatGateway
                  - ec2:DeleteSecurityGroup
                  - ec2:DetachInternetGateway
                  - ec2:DeleteInternetGateway
                  - ec2:ReleaseAddress
                  - ec2:DeleteVolume
                  - ec2:DetachVolume
                  - ec2:DeleteVpc
                Effect: Allow
                Resource: '*'
              - Action:
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:CreateLoadBalancerListeners
                  - elasticloadbalancing:ConfigureHealthCheck
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:SetLoadBalancerPoliciesOfListener
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DeleteLoadBalancer
                  - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
                  - elasticloadbalancing:AttachLoadBalancerToSubnets
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:DeleteLoadBalancerListeners
                Effect: Allow
                Resource: '*'
              - Action:
                  - iam:AddRoleToInstanceProfile
                  - iam:CreateInstanceProfile
                  - iam:CreateRole
                  - iam:GetInstanceProfile
                  - iam:GetUser
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:ListInstanceProfilesForRole
                  - iam:ListRoles
                  - iam:DeleteRole
                Effect: Allow
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:ListBucket
                  - s3:GetBucketCors
                  - s3:GetBucketWebsite
                  - s3:GetBucketVersioning
                  - s3:GetAccelerateConfiguration
                  - s3:GetBucketRequestPayment
                  - s3:GetBucketLogging
                  - s3:GetLifecycleConfiguration
                  - s3:GetBucketReplication
                  - s3:GetReplicationConfiguration
                  - s3:GetBucketLocation
                  - s3:GetBucketTagging
                  - s3:DeleteBucket
                  - s3:PutBucketAcl
                  - s3:PutBucketTagging
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectTagging
                  - s3:GetObjectVersion
                  - s3:DeleteObject
                Resource: arn:aws-cn:s3:::*
              - Action:
                  - sts:GetCallerIdentity
                Effect: Allow
                Resource: '*'
              - Action:
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResources
                Effect: Allow
                Resource: !Ref "AWS::StackId"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - 'arn:aws-cn:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:ListMetrics'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Sub '${RegistryBucket.Arn}'
                  - !Sub '${RegistryBucket.Arn}/*'
  SetupRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'SetupRole'
  OpenShiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow web console and ssh access to the master instances
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'RemoteAccessCIDR'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'RemoteAccessCIDR'
      Tags:
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          Value: owned
  OpenShiftNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https access to Openshift routers
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref 'VPCCIDR'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'ContainerAccessCIDR'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'ContainerAccessCIDR'
      Tags:
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          Value: owned
  OpenShiftMasterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LoadBalancerNames:
        - !Ref 'OpenShiftMasterELB'
      DesiredCapacity: !Ref 'NumberOfMaster'
      MaxSize: !Ref 'NumberOfMaster'
      MinSize: '2'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 2400
      LaunchConfigurationName: !Ref 'OpenShiftMasterASLaunchConfig'
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: openshift-master
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          PropagateAtLaunch: true
          Value: owned
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
        - !Ref 'PrivateSubnet3ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfMaster'
        Timeout: PT45M
  OpenShiftEtcdASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref 'NumberOfEtcd'
      MaxSize: !Ref 'NumberOfEtcd'
      MinSize: '2'
      LaunchConfigurationName: !Ref 'OpenShiftEtcdLaunchConfig'
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: openshift-etcd
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
        - !Ref 'PrivateSubnet3ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfEtcd'
        Timeout: PT45M
  OpenShiftNodeASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LoadBalancerNames:
        - !Ref 'ContainerAccessELB'
      DesiredCapacity: !Ref 'NumberOfNodes'
      MaxSize: !Ref 'NumberOfNodes'
      MinSize: '1'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 1200
      LaunchConfigurationName: !Ref 'OpenShiftNodesLaunchConfig'
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: openshift-nodes
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          PropagateAtLaunch: true
          Value: owned
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
        - !Ref 'PrivateSubnet3ID'
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'NumberOfNodes'
        Timeout: PT45M
  OpenShiftEtcdLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !If
        - UseCustomAmi
        - !Ref 'AmiId'
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - RHEL76HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 80
            VolumeType: gp2
      InstanceMonitoring: true
      IamInstanceProfile: !Ref 'SetupRoleProfile'
      InstanceType: !Ref 'EtcdInstanceType'
      SecurityGroups:
        - !Ref 'OpenShiftSecurityGroup'
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftEtcdASG --region ${AWS::Region}
  OpenShiftNodesLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !If
        - UseCustomAmi
        - !Ref 'AmiId'
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - RHEL76HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 80
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
      InstanceMonitoring: true
      IamInstanceProfile: !Ref 'SetupRoleProfile'
      InstanceType: !Ref 'NodesInstanceType'
      SecurityGroups:
        - !Ref 'OpenShiftSecurityGroup'
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftNodeASG --region ${AWS::Region}
  OpenShiftMasterASLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !If
        - UseCustomAmi
        - !Ref 'AmiId'
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - RHEL76HVM
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 60
            VolumeType: gp2
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
      InstanceMonitoring: true
      IamInstanceProfile: !Ref 'SetupRoleProfile'
      InstanceType: !Ref 'MasterInstanceType'
      SecurityGroups:
        - !Ref 'OpenShiftSecurityGroup'
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            echo "$(curl http://169.254.169.254/latest/meta-data/local-ipv4) ${OpenShiftMasterInternalELB.DNSName}" >> /etc/hosts
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource OpenShiftMasterASG --region ${AWS::Region}
  OpenShiftMasterELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 300
      CrossZone: true
      Subnets:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
        - !Ref 'PublicSubnet3ID'
      SecurityGroups:
        - !Ref 'OpenShiftSecurityGroup'
      Listeners:
        - InstancePort: '8443'
          InstanceProtocol: TCP
          LoadBalancerPort: '8443'
          Protocol: TCP
      HealthCheck:
        Target: HTTPS:8443/api/
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '3'
  ContainerAccessELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      ConnectionSettings:
        IdleTimeout: 300
      CrossZone: true
      Subnets:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
        - !Ref 'PublicSubnet3ID'
      SecurityGroups:
        - !Ref 'OpenShiftNodeSecurityGroup'
      Listeners:
        - InstancePort: '443'
          InstanceProtocol: TCP
          LoadBalancerPort: '443'
          Protocol: TCP
        - InstancePort: '80'
          InstanceProtocol: TCP
          LoadBalancerPort: '80'
          Protocol: TCP
      HealthCheck:
        Target: TCP:22
        HealthyThreshold: '2'
        UnhealthyThreshold: '3'
        Interval: '30'
        Timeout: '3'
      Tags:
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          Value: owned
  OpenShiftMasterInternalELB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      Subnets:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
        - !Ref 'PrivateSubnet3ID'
      Type: network
      Tags:
        - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
          Value: owned
  OpenShiftMasterInternalELBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPort: '22'
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 3
      Port: 443
      Protocol: TCP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCID
      Tags:
      - Key: !Sub
          - 'kubernetes.io/cluster/${ClusterName}'
          - ClusterName: !If
            - CustomClusterName
            - !Ref ClusterName
            - !Sub '${AWS::StackName}-${AWS::Region}'
        Value: owned
  OpenShiftMasterInternalELBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref OpenShiftMasterInternalELBTargetGroup
      LoadBalancerArn: !Ref OpenShiftMasterInternalELB
      Port: 443
      Protocol: TCP
  AnsibleServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cfg_networkmgr:
            - rpms
            - NetworkManager
        rpms:
          packages:
            yum:
              NetworkManager: []
        NetworkManager:
          commands:
            start_enable_nm:
              command: systemctl start NetworkManager && systemctl enable  NetworkManager
              ignoreErrors: 'false'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !If
        - UseCustomAmi
        - !Ref 'AmiId'
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref 'AWS::Region'
          - RHEL76HVM
      IamInstanceProfile: !Ref 'SetupRoleProfile'
      Tags:
        - Key: Name
          Value: ansible-server
      InstanceType: !Ref 'MasterInstanceType'
      NetworkInterfaces:
        - DeleteOnTermination: true
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref 'OpenShiftSecurityGroup'
          SubnetId: !Ref 'PublicSubnet1ID'
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            yum install -y git
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err " cfn bootstrap failed "
            cfn-signal -e $(qs_status) --stack ${AWS::StackName} --resource AnsibleServer --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT360M
Outputs:
  AnsibleServerIP:
    Description: Use this IP to login Ansible host.
    Value: !Sub "${AnsibleServer.PublicDnsName}"
  RegistryBucketName:
    Description: Name of S3 bucket to hold docker images.
    Value: !Sub "${RegistryBucket.DomainName}"
  OpenShiftMasterInteralELBName:
    Description: Use this ELB to access master api from the internel network.
    Value: !Sub "${OpenShiftMasterELB.DNSName}"
  OpenShiftMasterELBName:
    Description: Use this ELB to access master api from the public network.
    Value: !Sub "${OpenShiftMasterELB.DNSName}"
  ContainerAccessELBName:
    Description: Use this ELB to expose ports to the internet
    Value: !Sub "${ContainerAccessELB.DNSName}"
